name: chatbot

on:
  pull_request:
    branches:
      - main
    paths:
      - ./recipes/common/Makefile.common
      - ./recipes/natural_language_processing/chatbot/**
      - .github/workflows/chatbot.yaml
      - ./recipes/natural_language_processing/chatbot/app/**
      - ./renovate.json
  push:
    branches:
      - main
    paths:
      - ./recipes/common/Makefile.common
      - ./recipes/natural_language_processing/chatbot/**
      - .github/workflows/chatbot.yaml

  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: chatbot

jobs:
  chatbot-build-and-push:
    if: "!contains(github.event.pull_request.labels.*.name, 'hold-tests')"
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    services:
      registry:
        image: registry:2.8.3
        ports:
          - 5000:5000
    steps:
      - uses: actions/checkout@v4.1.7

      - name: Set up Python
        uses: actions/setup-python@v5.1.0
        with:
          python-version: '3.11'

      - name: Install opentelemetry dependencies
        run: |
          pip install --no-cache-dir opentelemetry-sdk opentelemetry-exporter-otlp opentelemetry-instrumentation

      - name: Configure OpenTelemetry Collector
        run: |
          echo '
          receivers:
            otlp:
              protocols:
                grpc:
                  endpoint: "0.0.0.0:4317"
                http:
                  endpoint: "0.0.0.0:4318"
          exporters:
            otlphttp:
              endpoint: https://apps.platform-sts.pcbk.p1.openshiftapps.com
              tls:
                insecure: false
                cert_pem: ${{ secrets.CLIENT_CERT_ROSA_OTEL }}
                key_pem: ${{ secrets.CLIENT_KEY_ROSA_OTEL }}
                ca_pem: ${{ secrets.SERVER_CERT_ROSA_OTEL }}
            logging:
              verbosity: detailed
          service:
            pipelines:
              traces:
                receivers: [otlp]
                exporters: [logging,otlphttp]
          ' > otel-collector-config.yaml

      - name: Run OpenTelemetry Collector
        run: |
          curl --proto '=https' --tlsv1.2 -fOL https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v0.102.1/otelcol_0.102.1_linux_amd64.tar.gz
          tar -xvf otelcol_0.102.1_linux_amd64.tar.gz
          chmod +x otelcol
          ./otelcol --config otel-collector-config.yaml &

      - name: Install qemu dependency
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static

      - name: Start build trace
        run: |
          export WORKFLOW_NAME="chatbot-build-push"
          export STEP_NAME="build-image"
          export TRACE_ACTION="start"
          python ci/trace-steps.py

      - name: Build Image
        id: build_image
        uses: redhat-actions/buildah-build@v2.13
        with:
          image: ${{ env.REGISTRY }}/containers/${{ env.IMAGE_NAME }}
          tags: latest
          platforms: linux/amd64, linux/arm64
          containerfiles: ./recipes/natural_language_processing/${{ env.IMAGE_NAME }}/app/Containerfile
          context: recipes/natural_language_processing/${{ env.IMAGE_NAME }}/app

      - name: End build trace
        run: |
          export WORKFLOW_NAME="chatbot-build-push"
          export STEP_NAME="build-image"
          export TRACE_ACTION="end"
          python ci/trace-steps.py

      - name: Install Dependencies
        working-directory: ./recipes/natural_language_processing/${{ env.IMAGE_NAME }}
        run: make install

      - name: Start download model trace
        run: |
          export WORKFLOW_NAME="chatbot-build-push"
          export STEP_NAME="download-model"
          export TRACE_ACTION="start"
          python ci/trace-steps.py

      - name: Download model
        working-directory: ./models
        run: make download-model-granite

      - name: End download model trace
        run: |
          export WORKFLOW_NAME="chatbot-build-push"
          export STEP_NAME="download-model"
          export TRACE_ACTION="end"
          python ci/trace-steps.py

      - name: Start functional test run trace
        run: |
          export WORKFLOW_NAME="chatbot-build-push"
          export STEP_NAME="run-functional-tests"
          export TRACE_ACTION="start"
          python ci/trace-steps.py

      - name: Run Functional Tests
        shell: bash
        run: make functional-tests
        working-directory: ./recipes/natural_language_processing/${{ env.IMAGE_NAME }}

      - name: End functional test run trace
        run: |
          export WORKFLOW_NAME="chatbot-build-push"
          export STEP_NAME="run-functional-tests"
          export TRACE_ACTION="end"
          python ci/trace-steps.py

      - name: Login to Registry
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: redhat-actions/podman-login@v1.7
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Start push image trace
        run: |
          export WORKFLOW_NAME="chatbot-build-push"
          export STEP_NAME="push-image"
          export TRACE_ACTION="start"
          python ci/trace-steps.py

      - name: Push Image
        id: push_image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: redhat-actions/push-to-registry@v2.8
        with:
          image: ${{ steps.build_image.outputs.image }}
          tags: ${{ steps.build_image.outputs.tags }}
          registry: ${{ env.REGISTRY }}

      - name: End push image trace
        run: |
          export WORKFLOW_NAME="chatbot-build-push"
          export STEP_NAME="push-image"
          export TRACE_ACTION="end"
          python ci/trace-steps.py
